scale_y_log10() +
geom_point() +
geom_line() +
theme( legend.position = "bottom" )
ggplot(S, aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_line() +
theme( legend.position = "bottom", legend.title = "dataset" )
ggplot(S, aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_line() +
guide_legend( title = "dataset" ) +
theme( legend.position = "bottom" )
ggplot(S, aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
knit_with_parameters('~/_swan/Teaching/2018-3_Fa_CSE_6753_Comp-Fundamentals/homework/05-sort-analysis/code/Analyize-Sorts.Rmd')
S %>%
filter(sort == "bubble" | sort == "insertion")
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10( title = "Input Size (n)") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() + ylab("Input Size (n)") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() + xlab("Input Size (n)") +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort), labeller = label_both) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort), labeller = label_both) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() + ylab("array operations") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
require(tidyverse)
require(modelr)
# Change default printing
options(tibble.print_max=5, tibble.print_min=5, tibble.width=Inf)
create_random <- function(vec)
{
V <- tibble(sorted = vec)
# Create reverse sorted
V <- V %>% add_column(reverse_sorted = rev(V$sorted))
# Capture random permutation vectors
r <- permute(V, 5)
# The first is our randomly sorted vector
V <- V %>% add_column(random = r$perm[[1]][3]$idx)
# Subsequent rows are random indices of the same length
i1 <- r$perm[[2]][3]$idx
i2 <- r$perm[[3]][3]$idx
i3 <- r$perm[[4]][3]$idx
# Create 80% sorted dataset, by using rand_vec to randomly
# shuffle 20% of the values in vec
swap_20 <- function(rand_vec, vec)
{
for(i in 1:max( 1, round( length(vec) * 0.1)))
{
# print(c(i, i*2-1, i*2))
# Shuffle a random pair
x <- vec[rand_vec][i*2-1]
vec[rand_vec][i*2-1] <- vec[rand_vec][i*2]
vec[rand_vec][i*2] <- x
}
return(vec)
}
# Create 80% sorted and 80% reverse sorted datasets
s80 <- swap_20(i1, V$sorted)
V <- V %>% add_column(sorted_80_percent = s80)
rs80 <- swap_20(i2, V$reverse_sorted)
V <- V %>% add_column(reverse_sorted_80_percent = rs80)
# Create 5 value dataset and permute it
v5 <- rep(1:5, nrow(V)/5)[i3]
V <- V %>% add_column(random_5_values = v5)
}
visualize_data <- function(V)
{
# Gather the data into tidy form
vg <- V %>%
gather(sorted,
reverse_sorted,
random,
sorted_80_percent,
reverse_sorted_80_percent,
random_5_values,
key="vector", value="value")
vg <- add_column(vg, .before = 1, index = rep(V$sorted, 6))
# Visualize it!
vg %>%
ggplot(aes(x = index, y = value)) +
facet_wrap(vars(fct_inorder(vector))) +
geom_point()
}
save_datasets <- function(V, V_name)
{
write_lines(V$sorted,                    paste0(V_name, "_sorted"))
write_lines(V$reverse_sorted,            paste0(V_name, "_reverse_sorted"))
write_lines(V$random,                    paste0(V_name, "_random"))
write_lines(V$sorted_80_percent,         paste0(V_name, "_sorted_80_percent"))
write_lines(V$reverse_sorted_80_percent, paste0(V_name, "_reverse_sorted_80_percent"))
write_lines(V$random_5_values,           paste0(V_name, "_random_5_values"))
}
v10    <- create_random(1:10)
v100   <- create_random(1:100)
v1000  <- create_random(1:1000)
v10000 <- create_random(1:10000)
visualize_data(v100)
save_datasets(v10,    "datasets/v10")
save_datasets(v100,   "datasets/v100")
save_datasets(v1000,  "datasets/v1000")
save_datasets(v10000, "datasets/v10000")
require(tidyverse)
require(modelr)
# Change default printing
options(tibble.print_max=5, tibble.print_min=5, tibble.width=Inf)
create_random <- function(vec)
{
V <- tibble(sorted = vec)
# Create reverse sorted
V <- V %>% add_column(reverse_sorted = rev(V$sorted))
# Capture random permutation vectors
r <- permute(V, 5)
# The first is our randomly sorted vector
V <- V %>% add_column(random = r$perm[[1]][3]$idx)
# Subsequent rows are random indices of the same length
i1 <- r$perm[[2]][3]$idx
i2 <- r$perm[[3]][3]$idx
i3 <- r$perm[[4]][3]$idx
# Create 80% sorted dataset, by using rand_vec to randomly
# shuffle 20% of the values in vec
swap_20 <- function(rand_vec, vec)
{
for(i in 1:max( 1, round( length(vec) * 0.1)))
{
# print(c(i, i*2-1, i*2))
# Shuffle a random pair
x <- vec[rand_vec][i*2-1]
vec[rand_vec][i*2-1] <- vec[rand_vec][i*2]
vec[rand_vec][i*2] <- x
}
return(vec)
}
# Create 80% sorted and 80% reverse sorted datasets
s80 <- swap_20(i1, V$sorted)
V <- V %>% add_column(sorted_80_percent = s80)
rs80 <- swap_20(i2, V$reverse_sorted)
V <- V %>% add_column(reverse_sorted_80_percent = rs80)
# Create 5 value dataset and permute it
v5 <- rep(1:5, nrow(V)/5)[i3]
V <- V %>% add_column(random_5_values = v5)
}
visualize_data <- function(V)
{
# Gather the data into tidy form
vg <- V %>%
gather(sorted,
reverse_sorted,
random,
sorted_80_percent,
reverse_sorted_80_percent,
random_5_values,
key="vector", value="value")
vg <- add_column(vg, .before = 1, index = rep(V$sorted, 6))
# Visualize it!
vg %>%
ggplot(aes(x = index, y = value)) +
facet_wrap(vars(fct_inorder(vector))) +
geom_point()
}
save_datasets <- function(V, V_name)
{
write_lines(V$sorted,                    paste0(V_name, "_sorted"))
write_lines(V$reverse_sorted,            paste0(V_name, "_reverse_sorted"))
write_lines(V$random,                    paste0(V_name, "_random"))
write_lines(V$sorted_80_percent,         paste0(V_name, "_sorted_80_percent"))
write_lines(V$reverse_sorted_80_percent, paste0(V_name, "_reverse_sorted_80_percent"))
write_lines(V$random_5_values,           paste0(V_name, "_random_5_values"))
}
v10    <- create_random(1:10)
v100   <- create_random(1:100)
v1000  <- create_random(1:1000)
v10000 <- create_random(1:10000)
save_datasets(v10,    "datasets/v10")
save_datasets(v100,   "datasets/v100")
save_datasets(v1000,  "datasets/v1000")
save_datasets(v10000, "datasets/v10000")
visualize_data(v100)
require(tidyverse)
require(modelr)
# Change default printing
options(tibble.print_max=5, tibble.print_min=5, tibble.width=Inf)
create_random <- function(vec)
{
V <- tibble(sorted = vec)
# Create reverse sorted
V <- V %>% add_column(reverse_sorted = rev(V$sorted))
# Capture random permutation vectors
r <- permute(V, 5)
# The first is our randomly sorted vector
V <- V %>% add_column(random = r$perm[[1]][3]$idx)
# Subsequent rows are random indices of the same length
i1 <- r$perm[[2]][3]$idx
i2 <- r$perm[[3]][3]$idx
i3 <- r$perm[[4]][3]$idx
# Create 80% sorted dataset, by using rand_vec to randomly
# shuffle 20% of the values in vec
swap_20 <- function(rand_vec, vec)
{
for(i in 1:max( 1, round( length(vec) * 0.1)))
{
# print(c(i, i*2-1, i*2))
# Shuffle a random pair
x <- vec[rand_vec][i*2-1]
vec[rand_vec][i*2-1] <- vec[rand_vec][i*2]
vec[rand_vec][i*2] <- x
}
return(vec)
}
# Create 80% sorted and 80% reverse sorted datasets
s80 <- swap_20(i1, V$sorted)
V <- V %>% add_column(sorted_80_percent = s80)
rs80 <- swap_20(i2, V$reverse_sorted)
V <- V %>% add_column(reverse_sorted_80_percent = rs80)
# Create 5 value dataset and permute it
v5 <- rep(1:5, nrow(V)/5)[i3]
V <- V %>% add_column(random_5_values = v5)
}
visualize_data <- function(V)
{
# Gather the data into tidy form
vg <- V %>%
gather(sorted,
reverse_sorted,
random,
sorted_80_percent,
reverse_sorted_80_percent,
random_5_values,
key="vector", value="value")
vg <- add_column(vg, .before = 1, index = rep(V$sorted, 6))
# Generate the plot
vplot <- vg %>%
ggplot(aes(x = index, y = value)) +
facet_wrap(vars(fct_inorder(vector))) +
geom_point()
# Draw the plot
vplot
}
save_datasets <- function(V, V_name)
{
write_lines(V$sorted,                    paste0(V_name, "_sorted"))
write_lines(V$reverse_sorted,            paste0(V_name, "_reverse_sorted"))
write_lines(V$random,                    paste0(V_name, "_random"))
write_lines(V$sorted_80_percent,         paste0(V_name, "_sorted_80_percent"))
write_lines(V$reverse_sorted_80_percent, paste0(V_name, "_reverse_sorted_80_percent"))
write_lines(V$random_5_values,           paste0(V_name, "_random_5_values"))
}
v10    <- create_random(1:10)
v100   <- create_random(1:100)
v1000  <- create_random(1:1000)
v10000 <- create_random(1:10000)
save_datasets(v10,    "datasets/v10")
save_datasets(v100,   "datasets/v100")
save_datasets(v1000,  "datasets/v1000")
save_datasets(v10000, "datasets/v10000")
visualize_data(v100)
visualize_data <- function(V)
{
# Gather the data into tidy form
vg <- V %>%
gather(sorted,
reverse_sorted,
random,
sorted_80_percent,
reverse_sorted_80_percent,
random_5_values,
key="vector", value="value")
vg <- add_column(vg, .before = 1, index = rep(V$sorted, 6))
# Generate the plot
vplot <- vg %>%
ggplot(aes(x = index, y = value)) +
facet_wrap(vars(fct_inorder(vector))) +
geom_point()
# Save the plot
ggsave("datasets.pdf", vplot, width=9, height=4.7)
# Draw the plot
vplot
}
visualize_data(v100)
vg
V
require(tidyverse)
require(modelr)
# Change default printing
options(tibble.print_max=5, tibble.print_min=5, tibble.width=Inf)
create_random <- function(vec)
{
V <- tibble(sorted = vec)
# Create reverse sorted
V <- V %>% add_column(reverse_sorted = rev(V$sorted))
# Capture random permutation vectors
r <- permute(V, 5)
# The first is our randomly sorted vector
V <- V %>% add_column(random = r$perm[[1]][3]$idx)
# Subsequent rows are random indices of the same length
i1 <- r$perm[[2]][3]$idx
i2 <- r$perm[[3]][3]$idx
i3 <- r$perm[[4]][3]$idx
# Create 80% sorted dataset, by using rand_vec to randomly
# shuffle 20% of the values in vec
swap_20 <- function(rand_vec, vec)
{
for(i in 1:max( 1, round( length(vec) * 0.1)))
{
# print(c(i, i*2-1, i*2))
# Shuffle a random pair
x <- vec[rand_vec][i*2-1]
vec[rand_vec][i*2-1] <- vec[rand_vec][i*2]
vec[rand_vec][i*2] <- x
}
return(vec)
}
# Create 80% sorted and 80% reverse sorted datasets
s80 <- swap_20(i1, V$sorted)
V <- V %>% add_column(sorted_80_percent = s80)
rs80 <- swap_20(i2, V$reverse_sorted)
V <- V %>% add_column(reverse_sorted_80_percent = rs80)
# Create 5 value dataset and permute it
v5 <- rep(1:5, nrow(V)/5)[i3]
V <- V %>% add_column(random_5_values = v5)
}
visualize_data <- function(V)
{
# Gather the data into tidy form
vg <- V %>%
gather(sorted,
reverse_sorted,
random,
sorted_80_percent,
reverse_sorted_80_percent,
random_5_values,
key="vector", value="value")
vg <- add_column(vg, .before = 1, index = rep(V$sorted, 6))
# Generate the plot
vplot <- vg %>%
ggplot(aes(x = index, y = value)) +
facet_wrap(vars(fct_inorder(vector))) +
geom_point()
# Save the plot
ggsave("datasets.pdf", vplot, width=9, height=4.7)
# Draw the plot
vplot
}
save_datasets <- function(V, V_name)
{
write_lines(V$sorted,                    paste0(V_name, "_sorted"))
write_lines(V$reverse_sorted,            paste0(V_name, "_reverse_sorted"))
write_lines(V$random,                    paste0(V_name, "_random"))
write_lines(V$sorted_80_percent,         paste0(V_name, "_sorted_80_percent"))
write_lines(V$reverse_sorted_80_percent, paste0(V_name, "_reverse_sorted_80_percent"))
write_lines(V$random_5_values,           paste0(V_name, "_random_5_values"))
}
v10    <- create_random(1:10)
v100   <- create_random(1:100)
v1000  <- create_random(1:1000)
v10000 <- create_random(1:10000)
save_datasets(v10,    "datasets/v10")
save_datasets(v100,   "datasets/v100")
save_datasets(v1000,  "datasets/v1000")
save_datasets(v10000, "datasets/v10000")
visualize_data(v100)
V
v10
require(tidyverse)
require(modelr)
# Change default printing
options(tibble.print_max=5, tibble.print_min=5, tibble.width=Inf)
S <- read_csv("sort_table.csv")
ggplot(S, aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort), labeller = label_both) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() + ylab("array operations") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
require(tidyverse)
require(modelr)
# Change default printing
options(tibble.print_max=5, tibble.print_min=5, tibble.width=Inf)
S <- read_csv("sort_table.csv")
ggplot(S, aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort), labeller = label_both) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() + ylab("array operations") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
s.cmp <- S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort), labeller = label_both) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() + ylab("array operations") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "bottom" )
s.cmp
ggsave("sort-comp.pdf", s.cmp)
ggsave("sort-comp.pdf", s.cmp, width=5, height=4)
ggsave("sort-comp.pdf", s.cmp, width=5, height=3)
ggsave("sort-comp.pdf", s.cmp, width=6, height=3)
ggsave("sort-comp.pdf", s.cmp, width=7, height=3)
s.cmp <- S %>%
filter(sort == "bubble" | sort == "insertion") %>%
ggplot(aes(x = N, y = operations, color = fct_reorder2(dataset, N, operations))) +
facet_grid(cols = vars(sort), labeller = label_both) +
scale_x_log10() + xlab("input size (n)") +
scale_y_log10() + ylab("array operations") +
geom_point() +
geom_line() +
guides(color = guide_legend(title = "dataset" )) +
theme( legend.position = "right" )
s.cmp
ggsave("sort-comp.pdf", s.cmp, width=7, height=3)
ggsave("sort-comp.pdf", s.cmp, width=8, height=3)
